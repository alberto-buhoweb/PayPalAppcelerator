/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.bea.paypal;

import java.math.BigDecimal;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;

import com.paypal.android.sdk.payments.PayPalConfiguration;
import com.paypal.android.sdk.payments.PayPalPayment;
import com.paypal.android.sdk.payments.PayPalService;
import com.paypal.android.sdk.payments.PaymentActivity;

@Kroll.module(name="Modulopaypal", id="com.bea.paypal")
public class ModulopaypalModule extends KrollModule
{
	// Standard Debugging variables
	private static final String LCAT = "ModulopaypalModule";
	private static final boolean DBG = TiConfig.LOGD;
	
	public String sandbox_id = "";
	public String live_id = "";
	public String client_id = "";

	
	
	@Kroll.constant
	public static final int ENVIRONMENT_SANDBOX = 0;
	@Kroll.constant
	public static final int ENVIRONMENT_LIVE = 1;
	public int environment;
	public String CONFIG_ENVIRONMENT = PayPalConfiguration.ENVIRONMENT_SANDBOX;
	
	
	
	@Kroll.constant
	public static final int PAYMENT_INTENT_SALE = 0;
	@Kroll.constant
	public static final int PAYMENT_INTENT_AUTHORIZE = 1;
	@Kroll.constant
	public static final int PAYMENT_INTENT_ORDER = 2;
	public int intentMode = 0;
	
	
	public String currencyCode = "USD";
	public BigDecimal amount = new BigDecimal("0.00");
	public String shortDescription = "";
	public String intent = PayPalPayment.PAYMENT_INTENT_SALE;
	
	public int REQUEST_CODE_PAYMENT = 1;
	
	public PayPalConfiguration paypalConfig;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public ModulopaypalModule()
	{
		super();
	}
	
	@Kroll.method
	public void initialize(@Kroll.argument(optional = true) KrollDict args) {
		Log.d(LCAT, "initialize method", Log.DEBUG_MODE);
		Log.i(LCAT, "initialize method", Log.DEBUG_MODE);
		if (args!=null && args instanceof KrollDict) {
			Log.d(LCAT, "If (args!=null && args instanceof KrollDict)", Log.DEBUG_MODE);
			if (args.containsKeyAndNotNull("sandbox_id")) {
				Log.d(LCAT, "args.containsKeyAndNotNull('sandbox_id')", Log.DEBUG_MODE);
				this.sandbox_id = TiConvert.toString(args.get("sandbox_id"));
			}
			
			if (args.containsKeyAndNotNull("live_id")) {
				Log.d(LCAT, "args.containsKeyAndNotNull('live_id')", Log.DEBUG_MODE);
				this.live_id = TiConvert.toString(args.get("live_id"));
			}
			
			if (args.containsKeyAndNotNull("environment")) {
				Log.d(LCAT, "args.containsKeyAndNotNull('environment')", Log.DEBUG_MODE);
				this.environment = TiConvert.toInt(args.get("environment"));
				if (this.environment == ModulopaypalModule.ENVIRONMENT_SANDBOX) {
					this.CONFIG_ENVIRONMENT = PayPalConfiguration.ENVIRONMENT_SANDBOX;
					this.client_id = this.sandbox_id;
				} else if(this.environment == ModulopaypalModule.ENVIRONMENT_LIVE) {
					this.CONFIG_ENVIRONMENT = PayPalConfiguration.ENVIRONMENT_PRODUCTION;
					this.client_id = this.live_id;
				}
			}
		}
		
		Context context = TiApplication.getInstance().getApplicationContext();
		
		this.paypalConfig = new PayPalConfiguration()
			.environment(this.CONFIG_ENVIRONMENT)
			.clientId(this.client_id)
			.languageOrLocale("en");
		
		Intent intent = new Intent(context, PayPalService.class);
		intent.putExtra(PayPalService.EXTRA_PAYPAL_CONFIGURATION, this.paypalConfig);
		
		context.startService(intent);
	}
	
	@Kroll.method
	public void createConfiguration(@Kroll.argument(optional = true) KrollDict args) {
		Log.d(LCAT, "createPayment method", Log.DEBUG_MODE);
		if (args!=null && args instanceof KrollDict) {
			Log.d(LCAT, "args!=null && args instanceof KrollDict", Log.DEBUG_MODE);
			if (args.containsKeyAndNotNull("currencyCode")) {
				this.currencyCode = TiConvert.toString(args.get("currencyCode"));
			}
			
			if (args.containsKeyAndNotNull("amount")) {
				this.amount = new BigDecimal(TiConvert.toString(args.get("amount")));
			}
			
			if (args.containsKeyAndNotNull("shortDescription")) {
				this.shortDescription = TiConvert.toString(args.get("shortDescription"));
			}
			
			if (args.containsKeyAndNotNull("intent")) {
				this.intentMode = TiConvert.toInt(args.get("intent"));
			}
			
			if (this.intentMode == ModulopaypalModule.PAYMENT_INTENT_SALE) {
				this.intent = PayPalPayment.PAYMENT_INTENT_SALE;
			} else if (this.intentMode == ModulopaypalModule.PAYMENT_INTENT_ORDER) {
				this.intent = PayPalPayment.PAYMENT_INTENT_ORDER;
			} else if (this.intentMode == ModulopaypalModule.PAYMENT_INTENT_AUTHORIZE) {
				this.intent = PayPalPayment.PAYMENT_INTENT_AUTHORIZE;
			}
		}
	}
	
	@Kroll.method
	@SuppressWarnings({ "rawtypes", "unchecked" }) 
	public void show() {
		Log.d(LCAT, "Show Payment", Log.DEBUG_MODE);
		
		TiApplication app = TiApplication.getInstance();
		
		Intent intent = new Intent(app,Payment.class);
		intent.putExtra("amount", this.amount);
		intent.putExtra("currencyCode", this.currencyCode);
		intent.putExtra("shortDescription", this.shortDescription);
		intent.putExtra("paypalConfig", this.paypalConfig);
		
		Activity activity = TiApplication.getAppCurrentActivity();
		TiActivitySupport support = (TiActivitySupport) activity;

		support.launchActivityForResult(intent, this.REQUEST_CODE_PAYMENT, new TiActivityResultHandler(){
			public void onError(Activity arg0, int arg1, Exception arg2) {
				
			}
			
			public void onResult(Activity dummy, int requestCode, int resultCode, Intent data) {
				KrollDict event = new KrollDict();
				if (requestCode == REQUEST_CODE_PAYMENT) {
					if (resultCode == Activity.RESULT_OK) {
						event.put("success", true);
						fireEvent("paymentDidComplete", event);
					} else if (resultCode == Activity.RESULT_CANCELED) {
						event.put("success", false);
						fireEvent("paymentDidCancel", event);
					}else if (resultCode == PaymentActivity.RESULT_EXTRAS_INVALID) {
						event.put("success", false);
						fireEvent("paymentDidInvalid", event);
					} else {
						event.put("success", false);
						fireEvent("paymentDidDefault", event);
					}
				} else {
					event.put("success", false);
					fireEvent("paymentDidDefault", event);
				}
			}
		});
	}
}

